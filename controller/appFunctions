const userModel = require('../models/user');
const questionModel = require('../models/questions');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const homepage = (req,res) => {
  questionModel.countDocuments({},(err, count) => {
    if (err){
      res.render('mainPage', {
        message: err
      })
    }else{
      if(count == 0)
      {
        res.render('mainPage', {
          message: 'There are no questions',
          status: "loggedOut"
        })
      }else{
        res.render('mainPage', {
          message: `There are ${count} questions`,
          status: "loggedOut"
        })
      }
    }
});
}

const showAuthenPage= (req,res) => {
  res.render('authenticationPage', {
    error: "",
    loginError:""
  });
}
const signUp =(req,res) => {
  if(req.body.Password != req.body.RepeatedPassword){
    res.render('authenticationPage', {
      error: "Passwords don't match!",
      loginError: ""
    })
  }
  else{
    let hashedPassword = bcrypt.hashSync(req.body.Password, 12);
    let userData = {
      ...req.body,
      Password: hashedPassword
    }
    let newUser = new userModel(userData);
    newUser.save()
    .then((user) => {
      const userToken = jwt.sign({id: user._id}, 'secret', {expiresIn: '1d'});
      res.cookie('isLoggedIn', userToken);
      res.redirect('/');
    })
    .catch(err => {
      res.render('authenticationPage',{
        error: err,
        loginError:""
      })
    })

  }
}
const logIn = async (req,res) => {
  let user = await userModel.findOne({Email: req.body.Email});
  if(!user){
   res.render('authenticationPage', {
    loginError: "Please, sign up first",
    error:""
   })
  }else{
    let checkPassword = bcrypt.compareSync(req.body.Password, user.Password);
    if(!checkPassword){
      res.render('authenticationPage', {
        loginError: "Wrong Password!",
        error: ""
      })
    }
    else{
      const userToken = await jwt.sign({id: user._id}, 'secret', {expiresIn: '1d'});
      res.cookie('isLoggedIn', userToken);
      res.redirect('/');
    }
  }
}

const loggingOut = (req,res) => {
  res.clearCookie('isLoggedIn');
  res.redirect('/');
}

const createQuestion = (req,res) => {
  console.log('createQuestion')
}



module.exports = {
  homepage,
  showAuthenPage,
  signUp,
  logIn,
  createQuestion,
  loggingOut}